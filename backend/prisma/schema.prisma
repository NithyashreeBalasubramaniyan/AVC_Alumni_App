generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ExistingAlumni {
  name       String
  reg_no     String   @id
  dob        DateTime
  mail       String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Alumni {
  id            Int      @id @default(autoincrement())
  name          String
  reg_no        String   @unique
  ph_no         String
  dob           DateTime
  mail          String
  password      String
  job_role      String?
  Linkedin_id   String?
  profile_image String?
  Batch         String?
  Experience    String?
  Bio           String?
  Gender        String?
  Company       String?
  is_verified   Boolean  @default(false)
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  posts Post[]
}

model ExistingStudent {
  name       String
  reg_no     String   @id
  dob        DateTime
  mail       String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Student {
  id           Int           @id @default(autoincrement())
  name         String
  reg_no       String        @unique
  ph_no        String
  mail         String
  dob          DateTime
  password     String
  canPost      Boolean       @default(false)
  department   String        // ðŸ”¹ NEW FIELD
  posts        Post[]
  postRequests PostRequest[]
}

model ExistingTeacher {
  name       String
  reg_no     String   @id
  dob        DateTime
  mail       String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Teacher {
  id            Int      @id @default(autoincrement())
  name          String
  reg_no        String   @unique
  ph_no         String
  dob           DateTime
  mail          String
  password      String
  job_role      String?
  Linkedin_id   String?
  Experience    String?
  Gender        String?
  Bio           String?
  Batch         String?
  Company       String?
  profile_image String?
  is_verified   Boolean  @default(false)
  department    String   // ðŸ”¹ NEW FIELD
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  posts Post[]
}

model Post {
  id        Int      @id @default(autoincrement())
  caption   String
  image     String?
  category  String
  createdAt DateTime @default(now())
  role      Role

  student   Student? @relation(fields: [studentId], references: [id])
  studentId Int?

  alumni   Alumni? @relation(fields: [alumniId], references: [id])
  alumniId Int?

  teacher   Teacher? @relation(fields: [teacherId], references: [id])
  teacherId Int?
}

model PostRequest {
  id         Int      @id @default(autoincrement())
  student    Student  @relation(fields: [studentId], references: [id])
  studentId  Int
  department String   // ðŸ”¹ NEW FIELD (copied from student at request creation)
  status     String   @default("PENDING") // PENDING / APPROVED / REJECTED
  createdAt  DateTime @default(now())
}

enum Role {
  STUDENT
  ALUMNI
  TEACHER
}
